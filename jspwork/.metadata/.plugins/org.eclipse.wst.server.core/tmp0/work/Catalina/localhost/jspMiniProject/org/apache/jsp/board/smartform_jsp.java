/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2023-03-07 02:38:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class smartform_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.5.0.js\"></script>\r\n");

	//프로젝트의 경로
	String root=request.getContextPath();

      out.write("\r\n");
      out.write("<!-- se2 폴더에서 js 파일 가져오기 -->\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(root);
      out.write("/se2/js/HuskyEZCreator.js\"\r\n");
      out.write("	charset=\"utf-8\"></script>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(root);
      out.write("/se2/photo_uploader/plugin/hp_SE2M_AttachQuickPhoto.js\"\r\n");
      out.write("	charset=\"utf-8\"></script>	\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<form action=\"board/addaction.jsp\" method=\"post\">\r\n");
      out.write("	<table class=\"table table-bordered\" style=\"width: 800px;margin-left: 100px;\">\r\n");
      out.write("		<caption><h3>스마트 포토 게시판</h3></caption>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th bgcolor=\"orange\" width=\"100\">작성자</th>\r\n");
      out.write("			<td>\r\n");
      out.write("				<input type=\"text\" name=\"writer\" class=\"form-control\"\r\n");
      out.write("					required=\"required\" style=\"width: 130px;\">\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th bgcolor=\"orange\" width=\"100\">제목</th>\r\n");
      out.write("			<td>\r\n");
      out.write("				<input type=\"text\" name=\"subject\" class=\"form-control\"\r\n");
      out.write("					required=\"required\" style=\"width: 500px;\">\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=\"2\">\r\n");
      out.write("				<textarea name=\"content\" id=\"content\"		\r\n");
      out.write("					required=\"required\"			\r\n");
      out.write("					style=\"width: 100%;height: 300px;display: none;\"></textarea>		\r\n");
      out.write("			\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=\"2\" align=\"center\">\r\n");
      out.write("				<button type=\"button\" class=\"btn btn-warning\"\r\n");
      out.write("					style=\"width: 120px;\"\r\n");
      out.write("					onclick=\"submitContents(this)\">DB저장</button>\r\n");
      out.write("				\r\n");
      out.write("				<button type=\"button\" class=\"btn btn-warning\"\r\n");
      out.write("					style=\"width: 120px;\"\r\n");
      out.write("					onclick=\"location.href='index.jsp?main=board/boardlist.jsp'\">목록</button>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		\r\n");
      out.write("	</table>   \r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("<!-- 스마트게시판에 대한 스크립트 코드 넣기 -->\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("var oEditors = [];\r\n");
      out.write("\r\n");
      out.write("nhn.husky.EZCreator.createInIFrame({\r\n");
      out.write("\r\n");
      out.write("    oAppRef: oEditors,\r\n");
      out.write("\r\n");
      out.write("    elPlaceHolder: \"content\",\r\n");
      out.write("\r\n");
      out.write("    sSkinURI: \"");
      out.print(request.getContextPath());
      out.write("/se2/SmartEditor2Skin.html\",\r\n");
      out.write("\r\n");
      out.write("    fCreator: \"createSEditor2\"\r\n");
      out.write("\r\n");
      out.write("}); \r\n");
      out.write("\r\n");
      out.write("//‘저장’ 버튼을 누르는 등 저장을 위한 액션을 했을 때 submitContents가 호출된다고 가정한다.\r\n");
      out.write("\r\n");
      out.write("function submitContents(elClickedObj) {\r\n");
      out.write("\r\n");
      out.write("    // 에디터의 내용이 textarea에 적용된다.\r\n");
      out.write("\r\n");
      out.write("    oEditors.getById[\"content\"].exec(\"UPDATE_CONTENTS_FIELD\", [ ]);\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("    // 에디터의 내용에 대한 값 검증은 이곳에서\r\n");
      out.write("\r\n");
      out.write("    // document.getElementById(\"textAreaContent\").value를 이용해서 처리한다.\r\n");
      out.write("    try {\r\n");
      out.write("        elClickedObj.form.submit();\r\n");
      out.write("    } catch(e) { \r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// textArea에 이미지 첨부\r\n");
      out.write("\r\n");
      out.write("function pasteHTML(filepath){\r\n");
      out.write("    var sHTML = '<img src=\"");
      out.print(request.getContextPath());
      out.write("/save/'+filepath+'\">';\r\n");
      out.write("    oEditors.getById[\"content\"].exec(\"PASTE_HTML\", [sHTML]); \r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
