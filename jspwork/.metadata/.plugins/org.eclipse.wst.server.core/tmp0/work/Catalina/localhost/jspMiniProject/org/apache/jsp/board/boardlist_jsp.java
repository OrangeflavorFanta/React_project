/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2023-03-08 03:12:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import data.Dao.SmartAnswerDao;
import data.Dto.smartDto;
import java.text.SimpleDateFormat;
import data.Dto.smartDto;
import java.util.List;
import data.Dao.smartDao;

public final class boardlist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("data.Dao.smartDao");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("data.Dao.SmartAnswerDao");
    _jspx_imports_classes.add("data.Dto.smartDto");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js\"></script>\r\n");
      out.write("<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("a:link,a:visited {\r\n");
      out.write("   text-decoration: none;\r\n");
      out.write("   color: black;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("	$(function(){\r\n");
      out.write("		\r\n");
      out.write("		//전체 체크 클릭 시 체크값 얻어서 모든 체크 값에 전달\r\n");
      out.write("		$(\".alldelcheck\").click(function(){\r\n");
      out.write("			\r\n");
      out.write("			var chk=$(this).is(\":checked\"); //ture,false반환\r\n");
      out.write("			\r\n");
      out.write("			//전체 체크 값을 글 앞의 체크에 일괄전달\r\n");
      out.write("			$(\".alldel\").prop(\"checked\", chk);\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("			//삭제버튼 클릭 시 삭제\r\n");
      out.write("			$(\"#btndel\").click(function(){\r\n");
      out.write("				\r\n");
      out.write("				//체크된 길이\r\n");
      out.write("				var len=$(\".alldel:checked\").length();\r\n");
      out.write("				//alert(len);\r\n");
      out.write("				\r\n");
      out.write("				if(len==0){\r\n");
      out.write("					alert(\"최소 1개 이상의 글을 선택해 주세요\");\r\n");
      out.write("				}else{\r\n");
      out.write("					var a=confirm(len+\"개의 글을 삭제하려면 [확인] 을 눌러주세요\");\r\n");
      out.write("					//체크된 곳의 value(num) 얻기\r\n");
      out.write("					\r\n");
      out.write("					var n=\"\";\r\n");
      out.write("					$(\".alldel:checked\").each(function(idx){\r\n");
      out.write("						n+=$(this).val()+\",\";\r\n");
      out.write("					});\r\n");
      out.write("					\r\n");
      out.write("					//마지막 컴마 제거하기\r\n");
      out.write("					n=n.substring(0,n.lenrgth-1));\r\n");
      out.write("					//alert(n);\r\n");
      out.write("					\r\n");
      out.write("					//삭제 파일로 전송\r\n");
      out.write("					location.href=\"board/alldelete.jsp?nums=\"+n ;\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("			});\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("			\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");

smartDao dao = new smartDao();

int totalCount;
int totalPage; //총 페이지수
int startPage; //각블럭의 시작페이지
int endPage; //각 블럭의 마지막페이지
int start; //각페이지 시작번호
int perPage = 3; //현제페이지 보여질 글의 갯수
int perBlock = 5; //한블럭당 보여지는 페이지개수
int currentPage; //현재페이지
int no;

//총갯수
totalCount = dao.getTotalCount();

//현재 페이지번호 읽기
if (request.getParameter("currentPage") == null)
   currentPage = 1;
else
   currentPage = Integer.parseInt(request.getParameter("currentPage"));

//총 페이지 갯수
totalPage = totalCount / perPage + (totalCount % perPage == 0 ? 0 : 1);

//각 블럭의 시작페이지
startPage = (currentPage - 1) / perBlock * perBlock + 1;
endPage = startPage + perBlock - 1;

//총페이지가 8... (6-10... endpage를 8로 수정)
if (endPage > totalPage)
   endPage = totalPage;

//각페이지에서 불러올 시작번호
start = (currentPage - 1) * perPage;

//각 페이지 에서 필요한 개시글 가져오기
List<smartDto> list = dao.getList(start, perPage);

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");

no = totalCount - (currentPage - 1) * perPage;

//댓글에 관한 dao
SmartAnswerDao adao=new SmartAnswerDao();

for(smartDto dto:list)
{
	//댓글변수에 총갯수 넣기
	int acount=adao.getAllAnswers(dto.getNum()).size();
	dto.setAnswercount(acount);
}








      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("   <div style=\"margin: 30px 30px; width: 800px;\">\r\n");
      out.write("      <br>\r\n");
      out.write("      <h6>\r\n");
      out.write("         <b>\r\n");
      out.write("            총\r\n");
      out.write("            ");
      out.print(totalCount);
      out.write("개의 게시글\r\n");
      out.write("         </b>\r\n");
      out.write("\r\n");
      out.write("      </h6>\r\n");
      out.write("      <table class=\"table table-bordered\">\r\n");
      out.write("         <caption>\r\n");
      out.write("            <b>스마트 게시판 목록</b>\r\n");
      out.write("         </caption>\r\n");
      out.write("         <tr>\r\n");
      out.write("            <th width=\"40\">번호</th>\r\n");
      out.write("            <th width=\"200\">제목</th>\r\n");
      out.write("            <th width=\"50\">작성자</th>\r\n");
      out.write("            <th width=\"50\">작성일</th>\r\n");
      out.write("            <th width=\"30\">조회</th>\r\n");
      out.write("         </tr>\r\n");
      out.write("         ");

         if (totalCount == 0) {
         
      out.write("\r\n");
      out.write("         <tr>\r\n");
      out.write("            <td colspan=\"5\" align=\"center\">\r\n");
      out.write("               <h3>등록된 게시판이 없음</h3>\r\n");
      out.write("\r\n");
      out.write("            </td>\r\n");
      out.write("         </tr>\r\n");
      out.write("         ");

         } else {
         for (smartDto dto : list) {
         
      out.write("\r\n");
      out.write("         <tr>\r\n");
      out.write("            <td align=\"center\">\r\n");
      out.write("               <input type=\"checkbox\" class=\"alldel\" value=\"");
      out.print(dto.getNum());
      out.write("\">\r\n");
      out.write("               &nbsp;&nbsp;\r\n");
      out.write("               ");
      out.print(no--);
      out.write("\r\n");
      out.write("            </td>\r\n");
      out.write("            \r\n");
      out.write("            <td>\r\n");
      out.write("            \r\n");
      out.write("           \r\n");
      out.write("            	");
 
            	if(dto.getAnswercount()>0)
            	{
      out.write("\r\n");
      out.write("            		<a href=\"index.jsp?main=board/dataileview.jsp>num=");
      out.print(dto.getNum());
      out.write("&currentPage=");
      out.print(currentPage);
      out.write("\">\r\n");
      out.write("            		");
      out.print(dto.getSubject() );
      out.print(dto.getAnswercount());
      out.write("</a>\r\n");
      out.write("            	");
}
            	
      out.write("\r\n");
      out.write("            \r\n");
      out.write("            </td>\r\n");
      out.write("            \r\n");
      out.write("            <td>\r\n");
      out.write("               <a href=\"index.jsp?main=board/detailview.jsp?num=");
      out.print(dto.getNum());
      out.write("&currentPage=");
      out.print(currentPage);
      out.write('"');
      out.write('>');
      out.print(dto.getSubject());
      out.write("</a>\r\n");
      out.write("            </td>\r\n");
      out.write("            <td align=\"center\">");
      out.print(dto.getWriter());
      out.write("</td>\r\n");
      out.write("            <td>");
      out.print(sdf.format(dto.getWriteday()));
      out.write("</td>\r\n");
      out.write("            <td>");
      out.print(dto.getReadcount());
      out.write("</td>\r\n");
      out.write("         </tr>\r\n");
      out.write("         ");

         }
         }
         
      out.write("\r\n");
      out.write("\r\n");
      out.write("         <tr>\r\n");
      out.write("            <td colspan=\"5\">\r\n");
      out.write("               <input type=\"checkbox\" class=\"alldelcheck\">\r\n");
      out.write("               전체선택\r\n");
      out.write("               <span style=\"float: right\">\r\n");
      out.write("                  <button type=\"button\" class=\"btn btn-danger btn-sm\" id=\"btndel\">\r\n");
      out.write("                     <span class=\"glyphicon glyphicon-remove\">삭제</span>\r\n");
      out.write("                  </button>\r\n");
      out.write("\r\n");
      out.write("                  &nbsp;\r\n");
      out.write("                  <button type=\"button\" class=\"btn btn-success btn-sm\" onclick=\"location.href='index.jsp?main=board/smartform.jsp\">\r\n");
      out.write("                     <span class=\"glyphicon glyphicon-pencil\">글쓰기</span>\r\n");
      out.write("                  </button>\r\n");
      out.write("\r\n");
      out.write("               </span>\r\n");
      out.write("            </td>\r\n");
      out.write("\r\n");
      out.write("         </tr>\r\n");
      out.write("      </table>\r\n");
      out.write("\r\n");
      out.write("   </div>\r\n");
      out.write("   <div style=\"width: 500px; text-align: center;\">\r\n");
      out.write("      <ul class=\"pagination\">\r\n");
      out.write("         ");

         //이전
         if (startPage > 1) {
         
      out.write("\r\n");
      out.write("         <li><a href=\"index.jsp?main=board/boardlist.jsp?currentPage=");
      out.print(startPage - 1);
      out.write("\">이전</a></li>\r\n");
      out.write("         ");

         }

         for (int pp = startPage; pp <= endPage; pp++) {

         if (pp == currentPage) {
         
      out.write("\r\n");
      out.write("         <li class=\"active\"><a href=\"index.jsp?main=board/boardlist.jsp?currentPage=");
      out.print(pp);
      out.write('"');
      out.write('>');
      out.print(pp);
      out.write("</a></li>\r\n");
      out.write("         ");

         } else {
         
      out.write("\r\n");
      out.write("         <li><a href=\"index.jsp?main=board/boardlist.jsp?currentPage=");
      out.print(pp);
      out.write('"');
      out.write('>');
      out.print(pp);
      out.write("</a></li>\r\n");
      out.write("         ");

         }

         }

         //다음
         if (endPage < totalPage) {
         
      out.write("\r\n");
      out.write("         <li><a href=\"index.jsp?main=board/boardlist.jsp?currentPage=");
      out.print(endPage + 1);
      out.write("\">다음</a></li>\r\n");
      out.write("         ");

         }
         
      out.write("\r\n");
      out.write("      </ul>\r\n");
      out.write("   </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
