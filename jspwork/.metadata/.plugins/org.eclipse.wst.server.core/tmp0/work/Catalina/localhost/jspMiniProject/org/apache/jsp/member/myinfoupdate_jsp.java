/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2023-03-20 00:57:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import data.Dto.MemberDto;
import data.Dao.MemberDao;

public final class myinfoupdate_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("data.Dao.MemberDao");
    _jspx_imports_classes.add("data.Dto.MemberDto");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Gaegu&family=Gowun+Batang&family=Hi+Melody&family=Noto+Serif+KR:wght@300&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.3.js\"></script>\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("		$(function(){\r\n");
      out.write("			\r\n");
      out.write("			//이메일\r\n");
      out.write("			$(\"#selEmail\").change(function(){\r\n");
      out.write("				\r\n");
      out.write("				if($(this).val()=='-'){ //직접입력(-)이면\r\n");
      out.write("					$(\"#email2\").val(''); //공란이고\r\n");
      out.write("				}else{ //그게 아니면\r\n");
      out.write("					$(\"#email2\").val($(this).val()); //선택한 value값이 들어가야함 \r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		//비밀번호 확인\r\n");
      out.write("		//비밀번호 다를때 액션 호출 안되게 해야 함 form에서 onsubmit=\"return passcheck(this)\"\r\n");
      out.write("		function passcheck(f){\r\n");
      out.write("			\r\n");
      out.write("			if(f.pass.value!=f.pass2.value){\r\n");
      out.write("				alert(\"비밀번호가 서로 다릅니다\");\r\n");
      out.write("				\r\n");
      out.write("				//입력 창들 다시 공란으로 해주고\r\n");
      out.write("				f.pass.value=\"\";\r\n");
      out.write("				f.pass2.value=\"\";\r\n");
      out.write("				\r\n");
      out.write("				return false; //비밀번호,비밀번호 확인이 다를 경우 action이 호출되지 않게\r\n");
      out.write("				\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	\r\n");
      out.write("	");

	String num=request.getParameter("num");
	MemberDao dao=new MemberDao();
	MemberDto dto=dao.getData(num);
	
      out.write("\r\n");
      out.write("	<form action=\"member/myinfoupdateaction.jsp\" method=\"post\" class=\"form-inline\" onsubmit=\"return passcheck(this)\">\r\n");
      out.write("	 <input type=\"hidden\" name=\"num\" value=\"");
      out.print(num);
      out.write("\"> \r\n");
      out.write("	 \r\n");
      out.write("		<table class=\"table table-bordered\" style=\"width: 500px;\">\r\n");
      out.write("		<caption><b>회원정보 수정</b></caption>\r\n");
      out.write("		\r\n");
      out.write("			<tr>\r\n");
      out.write("			<th width=\"100\" bgcolor=\"#B4COD7\">아이디</th>\r\n");
      out.write("				<td>\r\n");
      out.write("				");
      out.print(dto.getId() );
      out.write("\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			\r\n");
      out.write("			<tr>\r\n");
      out.write("			<th width=\"100\" bgcolor=\"#B4COD7\">비밀번호</th>\r\n");
      out.write("				<td>\r\n");
      out.write("				<input type=\"password\" name=\"pass\" class=\"form-control\" required=\"required\" style=\"width: 120px;\" placeholder=\"비밀번호 입력\">\r\n");
      out.write("				<input type=\"password\" name=\"pass2\" class=\"form-control\" required=\"required\" style=\"width: 120px;\" placeholder=\"비밀번호 확인\">\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			\r\n");
      out.write("			<tr>\r\n");
      out.write("			<th width=\"100\" bgcolor=\"#B4COD7\">이름</th>\r\n");
      out.write("				<td>\r\n");
      out.write("				<input type=\"text\" name=\"name\" value=\"");
      out.print(dto.getName() );
      out.write("\" class=\"form-control\" required=\"required\" style=\"width: 120px;\">\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			\r\n");
      out.write("			<tr>\r\n");
      out.write("			<th width=\"100\" bgcolor=\"#B4COD7\">핸드폰</th>\r\n");
      out.write("				<td>\r\n");
      out.write("				<input type=\"text\" name=\"hp\" value=\"");
      out.print(dto.getHp() );
      out.write("\" class=\"form-control\" required=\"required\" style=\"width: 200px;\">\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			\r\n");
      out.write("			<tr>\r\n");
      out.write("			<th width=\"100\" bgcolor=\"#B4COD7\">주소</th>\r\n");
      out.write("				<td>\r\n");
      out.write("				<input type=\"text\" name=\"addr\" value=\"");
      out.print(dto.getAddr() );
      out.write("\" class=\"form-control\" required=\"required\" style=\"width: 400px;\">\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			\r\n");
      out.write("			<tr>\r\n");
      out.write("			<th width=\"100\" bgcolor=\"#B4COD7\">이메일</th>\r\n");
      out.write("				<td>\r\n");
      out.write("				<input type=\"text\" name=\"email\" id=\"email\" class=\"form-control\" required=\"required\" style=\"width: 120px;\">\r\n");
      out.write("				<b>@</b>\r\n");
      out.write("				<input type=\"text\" name=\"email2\" id=\"email2\" class=\"form-control\" required=\"required\" style=\"width: 120px;\">\r\n");
      out.write("				\r\n");
      out.write("				<select id=\"selEmail\" class=\"form-control\">\r\n");
      out.write("					<option value=\"-\">직접 입력</option>\r\n");
      out.write("					<option value=\"naver.com\">네이버</option>\r\n");
      out.write("					<option value=\"gmail.com\">구글</option>\r\n");
      out.write("					<option value=\"daum.net\">다음</option>\r\n");
      out.write("					<option value=\"nate.com\">네이트</option>\r\n");
      out.write("				</select>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td colspan=\"2\" align=\"center\">\r\n");
      out.write("				<button type=\"submit\" class=\"btn btn-default\" style=\"width: 100px;\">저장</button>\r\n");
      out.write("				<button type=\"reset\" class=\"btn btn-default\" style=\"width: 100px;\">초기화</button>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</table>\r\n");
      out.write("	\r\n");
      out.write("	</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
